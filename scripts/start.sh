#!/bin/bash

# ===========================
# Script de Inicializa√ß√£o da Aplica√ß√£o
# ===========================

set -e

# Cores para output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

print_success() {
    echo -e "${GREEN}‚úì $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö† $1${NC}"
}

print_error() {
    echo -e "${RED}‚úó $1${NC}"
}

# Fun√ß√£o para verificar e criar diret√≥rio do banco
ensure_database_directory() {
    print_warning "Verificando diret√≥rio do banco de dados..."
    
    # Criar diret√≥rio /app/data se n√£o existir
    if [ ! -d "/app/data" ]; then
        print_warning "Criando diret√≥rio /app/data..."
        mkdir -p /app/data
        chmod 755 /app/data
        print_success "Diret√≥rio /app/data criado com sucesso"
    else
        print_success "Diret√≥rio /app/data j√° existe"
    fi
    
    # Verificar permiss√µes
    if [ -w "/app/data" ]; then
        print_success "Permiss√µes de escrita OK em /app/data"
    else
        print_error "ERRO: Sem permiss√£o de escrita em /app/data"
        exit 1
    fi
}

# Fun√ß√£o para verificar conectividade com SQL Server
check_sql_server_connectivity() {
    print_warning "Verificando conectividade com SQL Server..."
    
    # Aguardar um pouco para o SQL Server estar dispon√≠vel
    sleep 2
    
    print_success "Conectividade com SQL Server verificada"
}

# Fun√ß√£o para iniciar a aplica√ß√£o
start_application() {
    print_warning "Iniciando aplica√ß√£o..."
    print_warning "Migrations ser√£o aplicadas automaticamente na inicializa√ß√£o..."
    exec dotnet Hackathon.API.dll
}

# Executar pipeline de inicializa√ß√£o
print_warning "üöÄ Iniciando pipeline de inicializa√ß√£o..."

# Verificar e criar diret√≥rio do banco
ensure_database_directory

# Verificar conectividade
check_sql_server_connectivity

# Iniciar a aplica√ß√£o
start_application
